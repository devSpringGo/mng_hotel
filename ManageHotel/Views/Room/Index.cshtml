@model IEnumerable<ManageHotel.Models.Room>
@using Microsoft.AspNetCore.Mvc.Rendering
@using ManageHotel.Models

@{
    ViewData["Title"] = "Rooms";
    Layout = "_Layout";

    var currentHotel = ViewContext.HttpContext.Request.Query["hotelId"].ToString();
    var currentStatus = ViewContext.HttpContext.Request.Query["status"].ToString();
    var currentKeyword = ViewContext.HttpContext.Request.Query["keyword"].ToString();
}

@functions {
    // Parse status string safely:
    // - if it's numeric string => return numeric value
    // - if it's enum name like "Available" => map to enum value
    // - supports common synonyms ("occupied" -> Booked)
    public int ParseStatusValue(string statusStr)
    {
        if (int.TryParse(statusStr, out var s))
            return s;

        if (string.IsNullOrWhiteSpace(statusStr))
            return (int)RoomStatus.Available;

        // try parse enum by name (case-insensitive)
        if (Enum.TryParse<RoomStatus>(statusStr, true, out var enumVal))
            return (int)enumVal;

        // normalize common words
        switch (statusStr.Trim().ToLowerInvariant())
        {
            case "available":
            case "vacant":
                return (int)RoomStatus.Available;

            case "booked":
            case "occupied":
                return (int)RoomStatus.Booked;

            case "cleaning":
            case "clean":
                return (int)RoomStatus.Cleaning;

            case "maintenance":
            case "maint":
            case "repair":
                return (int)RoomStatus.Maintenance;

            default:
                return (int)RoomStatus.Available;
        }
    }
}

<div class="container-fluid">
    <h1 class="h3 mb-3 text-gray-800">Rooms</h1>

    <div class="card shadow mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <form method="get" class="d-flex gap-2 align-items-center">

                <!-- Filter by Hotel -->
                <select name="hotelId" class="form-select" style="width:180px;" onchange="this.form.submit()">
                    <option value="">-- All Hotels --</option>
                    @foreach (var h in (SelectList)ViewBag.Hotels)
                    {
                        var selected = (currentHotel == h.Value) ? "selected=\"selected\"" : "";
                        @Html.Raw($"<option value=\"{h.Value}\" {selected}>{h.Text}</option>")
                    }
                </select>

                <!-- Filter by Status -->
                <select name="status" class="form-select" style="width:160px;" onchange="this.form.submit()">
                    @foreach (var s in (IEnumerable<SelectListItem>)ViewBag.StatusList)
                    {
                        var selected = (currentStatus == s.Value) ? "selected=\"selected\"" : "";
                        @Html.Raw($"<option value=\"{s.Value}\" {selected}>{s.Text}</option>")
                    }
                </select>

                <!-- Search by Room Name -->
                <input type="text" name="keyword" class="form-control" placeholder="Search Room Name..."
                       value="@currentKeyword" style="width:200px;" />

                <button class="btn btn-primary"><i class="fa fa-search"></i></button>
            </form>

            <a class="btn btn-success" href="@Url.Action("Create")"><i class="fa fa-plus"></i> Add Room</a>
        </div>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Room Name</th>
                            <th>Hotel</th>
                            <th>Room Type</th>
                            <th>Status</th>
                            <th>Notes</th>
                            <th>Created At</th>
                            <th style="width:130px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model == null || !Model.Any())
                        {
                            <tr><td colspan="8" class="text-center text-muted">No rooms found</td></tr>
                        }
                        else
                        {
                            var i = 1;
                            foreach (var item in Model)
                            {
                                <tr>
                                    <td>@i++</td>
                                    <td>@item.RoomName</td>
                                    <td>@item.Hotel?.HotelName</td>
                                    <td>@item.RoomType?.TypeName</td>
                                    <td>
                                        @Html.Partial("_StatusBadge", ParseStatusValue(item.Status))
                                    </td>
                                    <td>@item.Notes</td>
                                    <td>@(item.CreatedAt?.ToString("dd/MM/yyyy HH:mm") ?? "-")</td>
                                    <td>
                                        <a class="btn btn-sm btn-info" href="@Url.Action("Edit", new { id = item.RoomId })"><i class="fa fa-edit"></i></a>
                                        <a class="btn btn-sm btn-danger" href="@Url.Action("Delete", new { id = item.RoomId })"><i class="fa fa-trash"></i></a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
